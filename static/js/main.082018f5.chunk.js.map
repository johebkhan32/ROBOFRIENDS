{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","constants.js","App.js","actions.js","reportWebVitals.js","reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","text","target","value","payload","fetch","then","response","json","data","catch","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.082018f5.chunk.js","sourcesContent":["import react from 'react';\r\nconst Card = ({name, email, id}) => {\r\n    return (\r\n        <div className ='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt='robots' src ={`https://robohash.org/ ${id}?200*200`}/>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n            \r\n    );\r\n}\r\nexport default Card;","import react from 'react';\r\nimport Card from './Card';\r\n  \r\n\r\nconst CardList = ({ robots }) => {\r\n    return(  \r\n        <div>\r\n            {\r\n             robots.map((user, i) => {\r\n                return(\r\n                    <Card\r\n                        key={i}\r\n                        id={robots[i].id}\r\n                        name={robots[i].name}\r\n                        email={robots[i].email}\r\n                    />\r\n                   );\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\nexport default CardList;\r\n","import react from 'react';\r\n \r\nconst SearchBox = ({searchfield, searchChange}) => {\r\n    return(\r\n        <div className = 'pa2'>\r\n        <input\r\n        className = 'pa3 ba b--green bg-lightest-blue'\r\n        type ='search'\r\n        placeholder = 'search robots'\r\n        onChange = { searchChange }\r\n        />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import react from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style ={{ overflow:'scroll', border: '5px solid black', height: '800px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n};\r\nexport default Scroll;","import react, {Component} from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError : false\r\n        }\r\n    }\r\n\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({ hasError : true })\r\n\r\n    }\r\n\r\n\r\nrender() {\r\n    if (this.state.hasError) {\r\n        return <h1>Oops. That is not good</h1>\r\n    }\r\n    return this.props.children\r\n  }\r\n}\r\n export default ErrorBoundary;\r\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import React, {Component} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../src/components/CardList';\r\nimport SearchBox from '../src/components/SearchBox';\r\nimport Scroll from '../src/components/Scroll';\r\nimport ErrorBoundary from '../src/components/ErrorBoundary';\r\nimport '../src/containers/App.css';\r\n\r\nimport { setSearchField, requestRobots } from '../src/actions';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        searchField : state.searchRobots.searchField,\r\n        robots : state.requestRobots.robots,\r\n        isPending : state.requestRobots.isPending,\r\n        error : state.requestRobots.error\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n   return{\r\n        onSearchChange : (event) => dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots : () => dispatch(requestRobots())\r\n   }\r\n}\r\n\r\n\r\nclass App extends Component {\r\n     componentDidMount() {  \r\n     this.props.onRequestRobots();\r\n    }\r\n\r\n    \r\n    render() { \r\n     const { searchField, onSearchChange, robots, isPending} = this.props\r\n     const filteredRobots = robots.filter(robots =>{\r\n        return robots.name.toLowerCase().includes(searchField.toLowerCase());\r\n     })\r\n\r\n        return isPending ?\r\n         <h1>Loading</h1>:\r\n        \r\n     (\r\n        <div className = 'tc' >\r\n        <h1 className = 'f1'>RoboFriends</h1>\r\n            <SearchBox searchChange = {onSearchChange}/>\r\n            <Scroll>\r\n            <ErrorBoundary>\r\n                <CardList robots = {filteredRobots}/>\r\n            </ErrorBoundary>\r\n            </Scroll>\r\n        </div>\r\n       );\r\n      }\r\n     }\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import {\r\n     CHANGE_SEARCH_FIELD,\r\n     REQUEST_ROBOTS_PENDING,\r\n     REQUEST_ROBOTS_SUCCESS,\r\n     REQUEST_ROBOTS_FAILED\r\n} from '../src/constants'\r\n\r\nexport const setSearchField = (text) => ({\r\n    type : CHANGE_SEARCH_FIELD,\r\n    payload : text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({ type: REQUEST_ROBOTS_PENDING});\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response => response.json()) \r\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error}))    \r\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {\r\n     CHANGE_SEARCH_FIELD,\r\n     REQUEST_ROBOTS_PENDING,\r\n     REQUEST_ROBOTS_SUCCESS,\r\n     REQUEST_ROBOTS_FAILED\r\n} from './constants'\r\n\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n    switch(action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n        return Object.assign({}, state, {searchField:action.payload})\r\n        default:\r\n            return state\r\n\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n    switch(action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, { isPending : true})\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, {robots: action.payload, isPending: false })\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, {error: action.payload, isPending: false }) \r\n            default:\r\n                return state;\r\n    }  \r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport  thunkMiddleware  from 'redux-thunk';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { searchRobots, requestRobots } from './reducers';\nimport 'tachyons';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({searchRobots, requestRobots})\n\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\n\nReactDOM.render(\n  <React.StrictMode>  \n     <Provider store={store}>\n       <App/>\n     </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}